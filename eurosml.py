# -*- coding: utf-8 -*-
"""EurosML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vJgbIbg7Zljc990M0sSm0_cZOoHG-DVM
"""

import requests
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from bs4 import BeautifulSoup
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from collections import defaultdict
from sklearn.preprocessing import LabelEncoder
from sklearn import preprocessing
from sklearn.metrics import classification_report
from sklearn.metrics import precision_recall_fscore_support

url = "https://site.web.api.espn.com/apis/v2/sports/soccer/uefa.euroq/standings"

headers = {
    'User-Agent': 'MyApp/1.0 (Windows NT 10.0; Win64; x64) Python Requests'
}

data = requests.get(url, headers=headers).json()

seasons = data.get('seasons', [])

data_list = []

for season in seasons:
    year = season.get('year', '')


    payload = {
        'region': 'za',
        'lang': 'en',
        'contentorigin': 'espn',
        'season': year,
        'sort': 'rank:asc'
    }

    response = requests.get(url, params=payload, headers=headers)

    if response.status_code == 200:
        data = response.json()

        groups = data.get('children', [])

        for group in groups:
            group_name = group.get('name', '')
            standings = group.get('standings', {}).get('entries', [])

            for team in standings:
                team_name = team.get('team', {}).get('name', '')
                stats = team.get('stats', [])

                team_stats = {'Season': year, 'Group Name': group_name, 'Team Name': team_name}

                for stat in stats:
                    team_stats[stat.get('displayName', '')] = stat.get('displayValue', '')

                data_list.append(team_stats)
    else:
        print(f"Error fetching data for season {year}: Status Code {response.status_code}")
        print(response.text)

df = pd.DataFrame(data_list)
os.makedirs('season_data', exist_ok=True)
df.to_csv('season_data/all_seasons.csv', index=False)
print(df)
print("Data for all seasons saved to 'season_data/all_seasons.csv'")

url = "https://www.skysports.com/euro-2024-table/2024"

response = requests.get(url)
if response.status_code != 200:
    print(f"Failed to fetch data. Status code: {response.status_code}")
else:
    soup = BeautifulSoup(response.content, 'html.parser')

    tables = soup.find_all('table', class_='standing-table__table')

    dfs = []

    for table in tables:
        caption = table.find('caption', class_='standing-table__caption')
        if caption:
            group_name_full = caption.text.strip()
            # Extract only the group name part (e.g., Group A, Group B)
            group_name = group_name_full.split(' - ')[1].split('2024')[0].strip()

            positions = []
            teams = []
            played = []
            won = []
            drawn = []
            lost = []
            goals_for = []
            goals_against = []
            goal_difference = []
            points = []

            for row in table.find_all('tr', class_='standing-table__row'):
                cells = row.find_all('td')
                if len(cells) > 1:
                    positions.append(cells[0].text.strip())
                    teams.append(cells[1].text.strip())
                    played.append(cells[2].text.strip())
                    won.append(cells[3].text.strip())
                    drawn.append(cells[4].text.strip())
                    lost.append(cells[5].text.strip())
                    goals_for.append(cells[6].text.strip())
                    goals_against.append(cells[7].text.strip())
                    goal_difference.append(cells[8].text.strip())
                    points.append(cells[9].text.strip())

            data = {
                'Group Name': [group_name] * len(positions),
                'Position': positions,
                'Team': teams,
                'Played': played,
                'Won': won,
                'Drawn': drawn,
                'Lost': lost,
                'Goals For': goals_for,
                'Goals Against': goals_against,
                'Goal Difference': goal_difference,
                'Points': points,
            }
            df = pd.DataFrame(data)

            dfs.append(df)

    euro_2024_df = pd.concat(dfs, ignore_index=True)
    euro_2024_df = euro_2024_df[['Group Name', 'Position', 'Team', 'Played', 'Won', 'Drawn', 'Lost', 'Goals For',
                                 'Goals Against', 'Goal Difference', 'Points']]

    print("Euro 2024 Standings:")
    print(euro_2024_df)
    euro_2024_df.to_csv('season_data/euros_2024.csv', index=False)
    print("Data saved to 'season_data/euros_2024.csv'")

df = pd.read_csv('season_data/all_seasons.csv')
euro_2024_df = pd.read_csv('season_data/euros_2024.csv')

all_teams = pd.concat([df['Team Name'], euro_2024_df['Team']]).unique()
all_groups = pd.concat([df['Group Name'], euro_2024_df['Group Name']]).unique()

# Initialize the LabelEncoder for 'Team Name'
team_name_le = LabelEncoder()
team_name_le.fit(all_teams)

# Initialize the LabelEncoder for 'Group Name'
group_name_le = LabelEncoder()
group_name_le.fit(all_groups)

df['Team Name'] = team_name_le.transform(df['Team Name'])

df['Season'] = df['Season'].astype(int)

# Handle missing values for 'Points' column
df['Points'] = df['Points'].replace(np.nan, df['Points'].mean())

df['Group Name'] = group_name_le.transform(df['Group Name'].astype(str))

# Remove unnecessary columns
df = df.drop(columns=['Rank Change', 'Point Deductions', 'Points Per Game', 'Overall'])

# Ensure column order and names are consistent
df = df[['Season', 'Group Name', 'Team Name', 'Games Played', 'Wins', 'Draws', 'Losses',
         'Goals For', 'Goals Against', 'Goal Difference', 'Points', 'Rank']]

# Renaming columns to match the structure of euro_2024_df
df.columns = ['Season', 'Group Name', 'Team', 'Played', 'Won', 'Drawn', 'Lost',
              'Goals For', 'Goals Against', 'Goal Difference', 'Points', 'Rank']

df.to_csv('season_data/encoded_cleaned_all_seasons.csv', index=False)

euro_2024_df['Team'] = euro_2024_df['Team'].astype(str)

euro_2024_df['Season'] = 2024

# Transform 'Team' in euro_2024_df to categorical codes using the same LabelEncoder
euro_2024_df['Team'] = team_name_le.transform(euro_2024_df['Team'])

# Ensure 'Group Name' column in euro_2024_df is string type before transforming
euro_2024_df['Group Name'] = euro_2024_df['Group Name'].astype(str)

# Transform 'Group Name' in euro_2024_df to numerical values using the same LabelEncoder
euro_2024_df['Group Name'] = group_name_le.transform(euro_2024_df['Group Name'])

# Rename 'Position' to 'Rank' in Euro 2024 data
euro_2024_df = euro_2024_df.rename(columns={'Position': 'Rank'})

# Ensure the column order is the same in both dataframes
euro_2024_df = euro_2024_df[['Season', 'Group Name', 'Team', 'Played', 'Won', 'Drawn', 'Lost',
                             'Goals For', 'Goals Against', 'Goal Difference', 'Points', 'Rank']]

# Save the cleaned and encoded Euro 2024 data to a new CSV file
euro_2024_df.to_csv('season_data/encoded_cleaned_euro_2024.csv', index=False)

merged_df = pd.concat([euro_2024_df, df], ignore_index=True)
merged_df.to_csv('season_data/encoded_cleaned_all_seasons.csv', index=False)

print(merged_df.head())
print("\nData has been cleaned and encoded. Saved to 'season_data/encoded_cleaned_all_seasons.csv'.")

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv('season_data/encoded_cleaned_all_seasons.csv')
df = df.drop(columns=['Season'])

X = df.drop(columns=['Rank', 'Won', 'Drawn', 'Lost'])
y = df[['Rank', 'Won', 'Drawn', 'Lost']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestRegressor(n_estimators=100, random_state=42)

model.fit(X_train, y_train)

euro_2024_df = pd.read_csv('season_data/euros_2024.csv')

all_teams = pd.concat([df['Team'].astype(str), euro_2024_df['Team'].astype(str)]).unique()
all_groups = pd.concat([df['Group Name'].astype(str), euro_2024_df['Group Name'].astype(str)]).unique()

team_name_le = LabelEncoder()
team_name_le.fit(all_teams)

group_name_le = LabelEncoder()
group_name_le.fit(all_groups)

euro_2024_df['Team'] = team_name_le.transform(euro_2024_df['Team'].astype(str))
euro_2024_df['Group Name'] = group_name_le.transform(euro_2024_df['Group Name'].astype(str))

euro_2024_features = euro_2024_df[X.columns]

euro_2024_predictions = model.predict(euro_2024_features)
euro_2024_predictions[euro_2024_predictions < 0] = 0

euro_2024_df.loc[:, 'Predicted Rank'] = euro_2024_predictions[:, 0]
euro_2024_df.loc[:, 'Predicted Won'] = euro_2024_predictions[:, 1]
euro_2024_df.loc[:, 'Predicted Drawn'] = euro_2024_predictions[:, 2]
euro_2024_df.loc[:, 'Predicted Lost'] = euro_2024_predictions[:, 3]

# Ensure total does not exceed number of games played (assuming number of games played is fixed, e.g., 3)
euro_2024_df['Predicted Won'] = np.minimum(euro_2024_df['Predicted Won'], euro_2024_df['Played'])
euro_2024_df['Predicted Drawn'] = np.minimum(euro_2024_df['Predicted Drawn'], euro_2024_df['Played'] - euro_2024_df['Predicted Won'])
euro_2024_df['Predicted Lost'] = euro_2024_df['Played'] - euro_2024_df['Predicted Won'] - euro_2024_df['Predicted Drawn']

# Convert the 'Team' and 'Group Name' codes back to the original names
euro_2024_df['Team'] = team_name_le.inverse_transform(euro_2024_df['Team'])
euro_2024_df['Group Name'] = group_name_le.inverse_transform(euro_2024_df['Group Name'])

euro_2024_df.to_csv('season_data/euros_2024_predicted_values_corrected.csv', index=False)
euro_2024_df.to_pickle('season_data/euros_2024_predicted_values_corrected.pkl')
print("Corrected predicted values for Euro 2024 saved to 'season_data/euros_2024_predicted_values_corrected.csv'.")

print(euro_2024_df)

df = pd.read_csv('season_data/euros_2024_predicted_values_corrected.csv')

# Create a bar plot for visualization of predicted ranks
plt.figure(figsize=(10, 20))
sns.set(style="whitegrid")
ax = sns.barplot(x="Predicted Rank", y="Team", data=df, orient="h", palette="viridis")
ax.set_title('Predicted Ranks for Euro 2024')
plt.show()

# Create bar plots for predicted Won, Drawn, and Lost games
fig, axs = plt.subplots(3, 1, figsize=(15, 25))

sns.barplot(x="Predicted Won", y="Team", data=df, ax=axs[0], palette="Blues_d")
axs[0].set_title('Predicted Won Games for Euro 2024')
axs[0].set_xlabel('Predicted Won Games')

sns.barplot(x="Predicted Drawn", y="Team", data=df, ax=axs[1], palette="Greens_d")
axs[1].set_title('Predicted Drawn Games for Euro 2024')
axs[1].set_xlabel('Predicted Drawn Games')

sns.barplot(x="Predicted Lost", y="Team", data=df, ax=axs[2], palette="Reds_d")
axs[2].set_title('Predicted Lost Games for Euro 2024')
axs[2].set_xlabel('Predicted Lost Games')

plt.tight_layout()
plt.show()